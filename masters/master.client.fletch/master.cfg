# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml.

import random

from buildbot.scheduler import Scheduler
from buildbot.schedulers import timed
from buildbot.schedulers.filter import ChangeFilter
from buildbot.schedulers import triggerable
from buildbot.status.mail import MailNotifier

from master import master_utils
from master import slaves_list
from master import status_logger
from master.factory import annotator_factory
from master.factory.dart import dart_factory
from master.factory.dart.channels import CHANNELS_BY_NAME
from master.factory.dart.dart_factory import linux_env

import config
import master_site_config


ActiveMaster = master_site_config.Dartino
utils = dart_factory.DartUtils(ActiveMaster)

MASTER_HOST = ActiveMaster.master_host
WEB_STATUS = True
MAIL_NOTIFIER = ActiveMaster.is_production_host
GOOD_REVISIONS = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c)


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port


####### CHANGESOURCES
dartino_poller = utils.get_github_poller('dartino', 'sdk')
dartino_dev_poller = utils.get_github_poller('dartino', 'sdk', branch='dev')

c['change_source'] = [dartino_poller, dartino_dev_poller]

####### SCHEDULERS

c['schedulers'] = []

# TODO(ricow): unify the below
# Cross compilation is broken on mac, so we trigger it from the linux
# sdk builder and use the arm binaries from there.
dartino_sdk_mac_builders = [
  'dartino-mac-release-x64-sdk',
]

dartino_dev_sdk_mac_builders = [
  '%s-dev' % n for n in dartino_sdk_mac_builders
]

c['schedulers'].append(triggerable.Triggerable(
    name='scheduler-mac-sdk',
    builderNames=dartino_sdk_mac_builders,
))

c['schedulers'].append(triggerable.Triggerable(
    name='scheduler-mac-sdk-dev',
    builderNames=dartino_dev_sdk_mac_builders,
))

# Scheduler - Dartino - Normal
dartino_normal_builders = [
  'dartino-linux-release-x86',
  'dartino-linux-debug-x86',
  'dartino-linux-release-asan-x86',
  'dartino-linux-debug-asan-x86',
  'dartino-free-rtos',
  'dartino-lk-debug-arm-qemu',
  'cross-dartino-linux-arm',
  'dartino-mac-release-x86',
  'dartino-mac-debug-x86',
  'dartino-mac-release-asan-x86',
  'dartino-mac-debug-asan-x86',
  'dartino-linux-release-x64-sdk',
  'dartino-win-debug-x86'
]

dartino_dev_builders = [
  '%s-dev' % n for n in dartino_normal_builders
]

dartino_scheduler = Scheduler(
    name='dartino_scheduler',
    change_filter=ChangeFilter(project='sdk', branch='master'),
    treeStableTimer=10,
    builderNames=dartino_normal_builders)
c['schedulers'].append(dartino_scheduler)

dartino_scheduler_dev = Scheduler(
    name='dartino_scheduler_dev',
    change_filter=ChangeFilter(project='sdk-dev', branch='dev'),
    treeStableTimer=10,
    builderNames=dartino_dev_builders)
c['schedulers'].append(dartino_scheduler_dev)

# Scheduler - Dartino - ARM
dartino_arm_builders = [
  'target-dartino-linux-release-arm',
  'target-dartino-linux-debug-arm',
]

dartino_dev_arm_builders = [
  '%s-dev' % n for n in dartino_arm_builders
]

c['schedulers'].append(triggerable.Triggerable(
    name='scheduler-arm',
    builderNames=dartino_arm_builders,
))

c['schedulers'].append(triggerable.Triggerable(
    name='scheduler-arm-dev',
    builderNames=dartino_dev_arm_builders,
))

dartino_builders = dartino_normal_builders + dartino_arm_builders

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

####### FACTORIES
server_url = config.Master.server_url

####### BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

c['builders'] = [ ]

for channel in ['', '-dev']:
  recipe_factory = annotator_factory.AnnotatorFactory().BaseFactory(
      recipe='client.fletch.recipe_autogen')

  category_prefix = '9' if channel == '-dev' else ''
  c['builders'].extend([
    # Dartino - Linux
    {
      'name': 'dartino-linux-release-x86%s' % channel,
      'builddir': 'dartino-linux-release-x86%s' % channel,
      'category': '%s0dartino-linux%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },
    {
      'name': 'dartino-linux-debug-x86%s' % channel,
      'builddir': 'dartino-linux-debug-x86%s' % channel,
      'category': '%s0dartino-linux%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },
    {
      'name': 'dartino-linux-release-asan-x86%s' % channel,
      'builddir': 'dartino-linux-release-asan-x86%s' % channel,
      'category': '%s0dartino-linux%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },
    {
      'name': 'dartino-linux-debug-asan-x86%s' % channel,
      'builddir': 'dartino-linux-debug-asan-x86%s' % channel,
      'category': '%s0dartino-linux%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },
    {
      'name': 'dartino-linux-release-x64-sdk%s' % channel,
      'builddir': 'dartino-linux-release-x64-sdk%s' % channel,
      'category': '%s4dartino-sdk%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },

    # Dartino - qemu lk.
    {
      'name': 'dartino-lk-debug-arm-qemu%s' % channel,
      'builddir': 'dartino-lk-debug-arm-qemu%s' % channel,
      'category': '%s3dartino-lk%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },

    # Dartino - free rtos
    {
      'name': 'dartino-free-rtos%s' % channel,
      'builddir': 'dartino-free-rtos%s' % channel,
      'category': '%s31dartino-free-rtos%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },

    # Dartino - Arm (cross & target)
    {
      'name': 'cross-dartino-linux-arm%s' % channel,
      'builddir': 'cross-dartino-linux-arm%s' % channel,
      'category': '%s1dartino-arm%s|all' % (category_prefix, channel),
      'factory' : recipe_factory,
      'auto_reboot': False,
    },
    {
      'name': 'target-dartino-linux-release-arm%s' % channel,
      'builddir': 'target-dartino-linux-release-arm%s' % channel,
      'category': '%s1dartino-arm%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },
    {
      'name': 'target-dartino-linux-debug-arm%s' % channel,
      'builddir': 'target-dartino-linux-debug-arm%s' % channel,
      'category': '%s1dartino-arm%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },

    # Dartino - MacOS
    {
      'name': 'dartino-mac-release-x86%s' % channel,
      'builddir': 'dartino-mac-release-x86%s' % channel,
      'category': '%s2dartino-mac%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },
    {
      'name': 'dartino-mac-release-x64-sdk%s' % channel,
      'builddir': 'dartino-mac-release-x64-sdk%s' % channel,
      'category': '%s4dartino-sdk%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },
    {
      'name': 'dartino-mac-debug-x86%s' % channel,
      'builddir': 'dartino-mac-debug-x86%s' % channel,
      'category': '%s2dartino-mac%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },
    {
      'name': 'dartino-mac-release-asan-x86%s' % channel,
      'builddir': 'dartino-mac-release-asan-x86%s' % channel,
      'category': '%s2dartino-mac%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },
    {
      'name': 'dartino-mac-debug-asan-x86%s' % channel,
      'builddir': 'dartino-mac-debug-asan-x86%s' % channel,
      'category': '%s2dartino-mac%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },

    # Dartino - Windows
    {
      'name': 'dartino-win-debug-x86%s' % channel,
      'builddir': 'dartino-win-debug-x86%s' % channel,
      'category': '%s1dartino-win%s|all' % (category_prefix, channel),
      'factory': recipe_factory,
      'auto_reboot': False,
    },

])

####### Factories and builders for channel based builders

slaves = slaves_list.SlavesList('slaves.cfg', 'Dartino')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

# Prioritize the builders.
def prioritize_builders(buildmaster, builders):
  def get_priority(name):
    if 'cross' in name:
      return 1
    elif 'release' in name:
      return 2
    return 10
  # Python's sort is stable, which means that builders with the same priority
  # will be in random order.
  random.shuffle(builders)
  builders.sort(key=lambda b: get_priority(b.name))
  return builders

c['prioritizeBuilders'] = prioritize_builders

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = [status_logger.StatusEventLogger()]

if WEB_STATUS:
  public_html = '../master.chromium/public_html'
  templates = ['templates',
               '../master.client.dart/templates',
               '../master.chromium/templates']
  master_port = ActiveMaster.master_port
  master_port_alt = ActiveMaster.master_port_alt
  kwargs = { 'order_console_by_time' : True }
  c['status'].append(master_utils.CreateWebStatus(master_port,
                                                  allowForce=True,
                                                  public_html=public_html,
                                                  templates=templates,
                                                  **kwargs))
  c['status'].append(master_utils.CreateWebStatus(master_port_alt,
                                                  allowForce=False,
                                                  public_html=public_html,
                                                  templates=templates,
                                                  **kwargs))

if MAIL_NOTIFIER:
  # We have people that are interested in a specific subset of the builders
  # and want to be notified whenever they break.
  dartinoSubject = "You broke dartino - now fetch a fix"
  dartinoNotifier = MailNotifier(ActiveMaster.from_address,
                                mode='problem',
                                sendToInterestedUsers=True,
                                lookup=master_utils.FilterDomain(),
                                subject=dartinoSubject,
                                builders=dartino_builders)

  c['status'].append(dartinoNotifier)


# Keep last build logs, the default is too low.
c['buildHorizon'] = 1000
c['logHorizon'] = 500
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200
# Must be at least 1x the number of builds listed in console.
c['buildCacheSize'] = 60

c['properties'] = {'mastername': master_utils.GetMastername()}

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = ActiveMaster.buildbot_url
