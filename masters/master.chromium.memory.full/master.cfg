# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.process.properties import WithProperties
from buildbot.scheduler import Triggerable
from buildbot.scheduler import Scheduler

from common import chromium_utils

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import gitiles_poller
from master import master_config
from master import master_utils
from master import slaves_list

from master.factory import annotator_factory
from master.factory import chromium_factory
from master.factory import remote_run_factory

import config
import master_site_config

ActiveMaster = master_site_config.ChromiumMemoryFull

c = BuildmasterConfig = {}
c['logCompressionLimit'] = False

config.DatabaseSetup(c)

####### CHANGESOURCES

master_poller = gitiles_poller.GitilesPoller(
    'https://chromium.googlesource.com/chromium/src')

c['change_source'] = [master_poller]


####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(name='chromium',
                       branch='master',
                       treeStableTimer=60,
                       builderNames=[# Builders
                                     'Chromium Linux TSan Builder',
                                     'Chromium Linux MSan Builder',
                                     'Chromium Linux ChromeOS MSan Builder',
                                    ])

s_chromium_linux_tsan = Triggerable(
    name='linux_tsan',
    builderNames=['Linux TSan Tests'])

s_chromium_linux_msan = Triggerable(
    name='linux_msan',
    builderNames=['Linux MSan Tests'])

s_chromium_linux_chromeos_msan = Triggerable(
    name='linux_chromeos_msan',
    builderNames=['Linux ChromeOS MSan Tests'])

c['schedulers'] = [s_chromium,
                   s_chromium_linux_tsan,
                   s_chromium_linux_msan,
                   s_chromium_linux_chromeos_msan]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_annotator = annotator_factory.AnnotatorFactory()

revision_getter = master_utils.ConditionalProperty(
    lambda build: build.getProperty('revision'),
    WithProperties('%(revision)s'),
    'master')

def m_remote_run_chromium_src(recipe, **kwargs):
  kwargs.setdefault('revision', revision_getter)
  return remote_run_factory.RemoteRunFactory(
      active_master=ActiveMaster,
      repository='https://chromium.googlesource.com/chromium/src.git',
      recipe=recipe,
      factory_properties={'path_config': 'kitchen'},
      use_gitiles=True,
      **kwargs)

# IMPORTANT NOTE about adding new tests.
# If you want to add a new test, make sure it's:
# a) buildable,
# b) runnable by all the tools,
# c) green locally under all tools (at least mostly) and
# d) the e-mail notifier is configured to watch for its failures.
# [See details below]
#
# Also, please do your best to estimate the time it takes to run the new test
# under the tool and order the tests in a short-job-first manner if possible.
#
# Regarding (b),
#   'chrome_tests.py' must be updated to handle the test name,
#   without the 'TOOL_' prefix, where 'chrome_tests.py' is located
#     at tools/valgrind/ for other tools.
#
# Regarding (d),
#   See notifier_cfg.py for the existing tests and see the 'category' of the
#   builder you're dealing with.
#
# Please coordinate with the current and upcoming memory sheriff and help them
# get the new tests green on all the bots after the master restart.

# Tests that are single-machine shard-safe.
sharded_tests = [
  'aura_unittests',
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'cc_unittests',
  'chromedriver_tests',
  'chromedriver_unittests',
  'components_unittests',
  'content_browsertests',
  'content_unittests',
  'crypto_unittests',
  'device_unittests',
  'display_unittests',
  'events_unittests',
  'extensions_unittests',
  'gcm_unit_tests',
  'gpu_unittests',
  'jingle_unittests',
  'media_unittests',
  'midi_unittests',
  'net_unittests',
  'ppapi_unittests',
  'printing_unittests',
  'remoting_unittests',
  'sync_integration_tests',
  'ui_base_unittests',
  'ui_touch_selection_unittests',
  'unit_tests',
  'views_unittests',
]


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_chromium_rel_linux_tsan_builder = {
  'name': 'Chromium Linux TSan Builder',
  'factory': m_remote_run_chromium_src('chromium', triggers=['linux_tsan']),
  'category': '10TSan v2|compile',
  'auto_reboot': True,
}

b_chromium_rel_linux_tsan = {
  'name': 'Linux TSan Tests',
  'factory': m_remote_run_chromium_src('chromium'),
  'category': '10TSan v2',
  'auto_reboot': True,
}

b_chromium_rel_linux_msan_builder = {
  'name': 'Chromium Linux MSan Builder',
  'factory': m_remote_run_chromium_src('chromium', triggers=['linux_msan']),
  'category': '11Linux MSan|compile',
  'auto_reboot': True,
}

b_chromium_rel_linux_msan = {
  'name': 'Linux MSan Tests',
  'factory': m_remote_run_chromium_src('chromium'),
  'category': '11Linux MSan',
  'auto_reboot': True,
}

b_chromium_rel_linux_chromeos_msan_builder = {
  'name': 'Chromium Linux ChromeOS MSan Builder',
  'factory': m_remote_run_chromium_src('chromium', triggers=['linux_chromeos_msan']),
  'category': '12ChromeOS MSan|compile',
  'auto_reboot': True,
}

b_chromium_rel_linux_chromeos_msan = {
  'name': 'Linux ChromeOS MSan Tests',
  'factory': m_remote_run_chromium_src('chromium'),
  'category': '12ChromeOS MSan',
  'auto_reboot': True,
}

c['builders'] = [
  b_chromium_rel_linux_tsan_builder,
  b_chromium_rel_linux_tsan,
  b_chromium_rel_linux_msan_builder,
  b_chromium_rel_linux_msan,
  b_chromium_rel_linux_chromeos_msan_builder,
  b_chromium_rel_linux_chromeos_msan,
]

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumMemoryFull')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

####### STATUS TARGETS

# Buildbot master url:
# Must come before AutoSetupMaster().
c['buildbotURL'] = ActiveMaster.buildbot_url

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['../master.chromium/templates'],
    tagComparator=master_poller.comparator,
    enable_http_status_push=ActiveMaster.is_production_host)

if ActiveMaster.is_production_host:
  import notifier_cfg
  notifier_cfg.Update(config, ActiveMaster, c)
