# vim: ft=python:
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes.filter import ChangeFilter
from buildbot.scheduler import Dependent
from buildbot.scheduler import Nightly
from buildbot.scheduler import Periodic
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable
from buildbot.status.mail import MailNotifier

from common import chromium_utils

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import build_utils
from master import chromium_notifier
from master import failures_notifier
from master import master_config
from master import master_utils
from master import slaves_list
from master import gitiles_poller

from master.factory import annotator_factory
from master.factory import kitchen_factory

# These modules come from scripts/common, which must be in the PYTHONPATH.
import config
import master_site_config

import master_win_drmemory_cfg

ActiveMaster = master_site_config.ChromiumFYI

DRMEMORY_NOTIFIER = True
STATUS_PUSH = False

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['status'] = []

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

# Polls config.Master.trunk_url for changes
chromium_repo_url = config.Master.git_server_url + '/chromium/src'
trunk_poller = gitiles_poller.GitilesPoller(chromium_repo_url,
                                            project='chromium')

c['change_source'] = [trunk_poller]

# Number of machines to shard ash browser_tests over.
ASH_SHARDS = 2

####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(
    name='chromium',
    treeStableTimer=60,
    change_filter=ChangeFilter(project='chromium', branch='master'),
    builderNames=['Chromium Builder',
                  'Chromium Windows Analyze',
                  'Chromium Builder (dbg)',
                  # The bots need a short name to work around crbug.com/399990.
                  'CrWinGoma',
                  'CrWinGoma(dll)',  # not (shared) cause crbug.com/399990
                  'CrWin7Goma',
                  'CrWin7Goma(dll)',  # not (shared) cause crbug.com/399990
                  'CrWin7Goma(dbg)',
                  'CrWin7Goma(clbr)',  # not (clobber) cause crbug.com/399990
                  'CrWinClangGoma',
                  'WinClang',
                  'CrWinClang',
                  'CrWinClang(dbg)',
                  'CrWinClang(shared)',
                  'CrWinClang64',
                  'CrWinClang64(dbg)',
                  'CrWinClang64(dll)',  # not (shared) cause crbug.com/399990
                  'CrWinClangLLD',
                  'CrWinClngLLDdbg',
                  'CrWinClangLLD64',
                  'CrWinClngLLD64dbg',  # not (dbg) cause crbug.com/399990
                  'CrWinAsan',
                  'CrWinAsanCov',
                  'ClangToTLinux',
                  'ClangToTLinux (dbg)',
                  'ClangToTLinuxASan',
                  'ClangToTLinuxUBSanVptr',
                  'ClangToTAndroidASan',
                  'ClangToTMac',
                  'ClangToTMac (dbg)',
                  'ClangToTMacASan',
                  'ClangToTiOS',
                  'ClangToTWin',
                  'ClangToTWin(dbg)',
                  'ClangToTWin(dll)',  # not (shared) cause crbug.com/399990
                  'ClangToTWin64',
                  'ClangToTWin64(dbg)',
                  'ClangToTWin64(dll)',  # not (shared) cause crbug.com/399990
                  'CrWinAsan(dll)',  # not (asan/shared) cause crbug.com/399990
                  'Chromium Win x64 Clobber',
                  'Chromium Win PGO Builder',
                  'Chromium Win x64 PGO Builder',
                  'Blink Linux LSan ASan',
                  'Windows Builder (DrMemory)',
                  'Android Builder (dbg)',
                  'Android Asan Builder Tests (dbg)',
                  'Android Cloud Tests',
                  'Chromium_iOS_Simulator_(dbg)',
                  'Chromium_iOS_Device',
                  'Chromium_iOS_Device_(ninja)',
                  'Chromium Linux Goma Canary',
                  'Chromium Linux Goma Canary (clobber)',
                  'Chromium Linux Precise Goma LinkTest',
                  'Chromium Linux32 Goma Canary (clobber)',
                  'Chromium Mac 10.9 Goma Canary',
                  'Chromium Mac 10.9 Goma Canary (dbg)',
                  'Chromium Mac 10.9 Goma Canary (clobber)',
                  'Chromium Mac 10.9 Goma Canary (dbg)(clobber)',
                  'Chromium Mac 10.10 MacViews',
                  'Chromium Mac 10.11',
                  'Chromium Mac 10.11 Force Mac Toolchain',
                  'Windows 8 App Certification',
                  'ChromiumOS Linux Tests',
                  'Ozone ECS Linux',
                  'Linux ARM',
                  'Linux Trusty',
                  'Linux Trusty (dbg)',
                  'Linux V8 API Stability',
                  'Headless Linux (dbg)',
                  'Site Isolation Linux',
                  'Site Isolation Win',
                  'Browser Side Navigation Linux',
                  'Closure Compilation Linux',
                  'CFI Linux',
                  'CFI Linux ToT',
                  'CFI Linux CF',
                  'LTO Linux Perf',
                  'Chromium Win 10',
                  'Libfuzzer Upload Linux ASan',
                  'Libfuzzer Upload Linux MSan',
                  'Libfuzzer Upload Linux UBSan',
                  'MD Top Chrome ChromeOS non-material',
                  'MD Top Chrome ChromeOS material-hybrid',
                  'MD Top Chrome Win material',
                  'MD Top Chrome Linux material',
                  'WebKit Linux - TraceWrappables',
                  'Linux Kitchen (kitchen_run)',
                  'Linux Kitchen (annotated_run)',
                  ])

# Triggerable scheduler for Windows Release.
s_chromium_win_rel = Triggerable(
    name='win_rel',
    builderNames=['Chromium Win MiniInstaller Tests',
                  'Win8 Tests (1)',
                  'Win8 Tests (2)',])

# Triggerable scheduler for Windows Debug.
s_chromium_win_dbg = Triggerable(
    name='win_dbg',
    builderNames=['Vista Tests (dbg)(1)',
                  'Vista Tests (dbg)(2)',])

# Triggerable scheduler for Android Builder
s_chromium_android_dbg = Triggerable(
    name='android_dbg',
    builderNames=['Android ChromeDriver Tests (dbg)',
                  'Android Tests (trial)(dbg)',
                  'Android Tests (x86 emulator)',
                  'Android Remoting Tests',])

# Windows Dr. Memory build-bot list
t_drmemory_bots=[
  'Windows Tests (DrMemory)',
  ]

# Windows Browser (DrMemory light)
WINDOWS_BROWSER_DRMEMORY_LIGHT_TESTERS = 2
for i in range(WINDOWS_BROWSER_DRMEMORY_LIGHT_TESTERS):
    t_drmemory_bots.append('Windows Browser (DrMemory light) (%d)' % (i+1))

s_chromium_windows_drmemory_trigger = Triggerable(
    name='chromium_windows_drmemory',
    builderNames=t_drmemory_bots)

# Triggerable schedulers for clang/win bots
s_win_clang = Triggerable(
    name='cr_win_clang', builderNames=['CrWinClang tester'])
s_win_clang_dbg = Triggerable(
    name='cr_win_clang_dbg', builderNames=['CrWinClang(dbg) tester'])
s_win_clang_shared = Triggerable(
    name='cr_win_clang_shared', builderNames=['CrWinClang(shared) tester'])
s_win_clang_64 = Triggerable(
    name='cr_win_clang_64',
    builderNames=['CrWinClang64 tester'])
s_win_clang_64_dbg = Triggerable(
    name='cr_win_clang_64_dbg',
    builderNames=['CrWinClang64(dbg) tester'])
s_win_clang_64_shared = Triggerable(
    name='cr_win_clang_64_shared',
    builderNames=['CrWinClang64(dll) tester'])
s_win_clang_lld = Triggerable(
    name='cr_win_clang_lld', builderNames=['CrWinClangLLD tester'])
s_win_clang_lld_dbg = Triggerable(
    name='cr_win_clang_lld_dbg', builderNames=['CrWinClngLLDdbg tester'])
s_win_clang_lld64 = Triggerable(
    name='cr_win_clang_lld64', builderNames=['CrWinClangLLD64 tester'])
s_win_clang_lld64_dbg = Triggerable(
    name='cr_win_clang_lld64_dbg', builderNames=['CrWinClngLLD64dbg tester'])
s_win_clang_asan = Triggerable(
    name='cr_win_clang_asan', builderNames=['CrWinAsan tester'])
s_win_clang_asan_shared = Triggerable(
    name='cr_win_clang_asan_shared', builderNames=['CrWinAsan(dll) tester'])
s_win_clang_asan_coverage = Triggerable(
    name='cr_win_clang_asan_coverage', builderNames=['CrWinAsanCov tester'])

# Triggerable schedulers for Clang ToT bots.
s_clang_tot_linux = Triggerable(
    name='clang_tot_linux', builderNames=['ClangToTLinux tester'])
s_clang_tot_linux_asan = Triggerable(
    name='clang_tot_linux_asan', builderNames=['ClangToTLinuxASan tester'])
s_clang_tot_linux_ubsan_vptr = Triggerable(
    name='clang_tot_linux_ubsan_vptr', builderNames=['ClangToTLinuxUBSanVptr tester'])
s_clang_tot_android_asan = Triggerable(
    name='clang_tot_android_asan', builderNames=['ClangToTAndroidASan tester'])
s_clang_tot_mac = Triggerable(
    name='clang_tot_mac', builderNames=['ClangToTMac tester'])
s_clang_tot_mac_asan = Triggerable(
    name='clang_tot_mac_asan', builderNames=['ClangToTMacASan tester'])
s_clang_tot_win = Triggerable(
    name='clang_tot_win', builderNames=['ClangToTWin tester'])
s_clang_tot_win_dbg = Triggerable(
    name='clang_tot_win_dbg', builderNames=['ClangToTWin(dbg) tester'])
s_clang_tot_win_dll = Triggerable(
    name='clang_tot_win_dll', builderNames=['ClangToTWin(dll) tester'])
s_clang_tot_win64 = Triggerable(
    name='clang_tot_win64', builderNames=['ClangToTWin64 tester'])
s_clang_tot_win64_dbg = Triggerable(
    name='clang_tot_win64_dbg', builderNames=['ClangToTWin64(dbg) tester'])
s_clang_tot_win64_dll = Triggerable(
    name='clang_tot_win64_dll', builderNames=['ClangToTWin64(dll) tester'])

c['schedulers'] = [s_chromium,
                   s_chromium_android_dbg,
                   s_chromium_win_rel,
                   s_chromium_win_dbg,
                   s_chromium_windows_drmemory_trigger,
                   s_win_clang,
                   s_win_clang_dbg,
                   s_win_clang_shared,
                   s_win_clang_64,
                   s_win_clang_64_dbg,
                   s_win_clang_64_shared,
                   s_win_clang_lld,
                   s_win_clang_lld_dbg,
                   s_win_clang_lld64,
                   s_win_clang_lld64_dbg,
                   s_win_clang_asan,
                   s_win_clang_asan_shared,
                   s_win_clang_asan_coverage,
                   s_clang_tot_linux,
                   s_clang_tot_linux_asan,
                   s_clang_tot_linux_ubsan_vptr,
                   s_clang_tot_android_asan,
                   s_clang_tot_mac,
                   s_clang_tot_mac_asan,
                   s_clang_tot_win,
                   s_clang_tot_win_dbg,
                   s_clang_tot_win_dll,
                   s_clang_tot_win64,
                   s_clang_tot_win64_dbg,
                   s_clang_tot_win64_dll,
]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

F_RECIPE = annotator_factory.AnnotatorFactory().BaseFactory(
    recipe='chromium.fyi.win_block.recipe_autogen')

F_RECIPE_WDM = annotator_factory.AnnotatorFactory().BaseFactory(
    recipe='chromium.fyi.drmemory_win_block.recipe_autogen')

F_RECIPE_WDBG = annotator_factory.AnnotatorFactory().BaseFactory(
    recipe='chromium.fyi.debug_win_block.recipe_autogen')

F_RECIPE_WMISC = annotator_factory.AnnotatorFactory().BaseFactory(
    recipe='chromium.fyi.win_misc_block.recipe_autogen')

F_RECIPE_MISC = annotator_factory.AnnotatorFactory().BaseFactory(
    recipe='chromium.fyi.misc_block.recipe_autogen')

chromium_rel_archive = master_config.GetGSUtilUrl(
    'chromium-build-transfer', 'Chromium FYI Builder')

chromium_dbg_archive = master_config.GetGSUtilUrl(
    'chromium-build-transfer', 'Chromium FYI Builder (dbg)')

chromium_windows_drmemory_archive = master_config.GetGSUtilUrl(
    'chromium-build-transfer', 'drm-cr')

chromium_android_fyi_dbg_archive = master_config.GetGSUtilUrl(
    'chromium-fyi-archive', 'chromium.fyi/Android Builder (dbg)')

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.
f_chromium_win_pgo_builder = \
    annotator_factory.AnnotatorFactory().BaseFactory(recipe='chromium_pgo',
                                                     timeout=24000)

f_chromium_win_x64_pgo_builder = \
    annotator_factory.AnnotatorFactory().BaseFactory(recipe='chromium_pgo',
                                                     timeout=24000)

f_win_analyze = \
  annotator_factory.AnnotatorFactory().BaseFactory(
    recipe='win_analyze')

def without(these, notthese):
  return [x for x in these if x not in notthese]

tests_win_1 = ['base_unittests',
               'cacheinvalidation_unittests',
               'chrome_elf_unittests',
               'components_unittests',
               'courgette_unittests',
               'crypto_unittests',
               'device_unittests',
               'extensions_unittests',
               'gcm_unit_tests',
               'google_apis_unittests',
               'gpu',
               'installer',
               'jingle',
               'media',
               'net',
               'ppapi_unittests',
               'printing',
               'remoting',
               'sandbox',
               'unit',
               'url_unittests',
]
tests_win_2 = ['browser_tests',
               'content_browsertests']

win_x64_tests = [
  'base_unittests',
  'cacheinvalidation_unittests',
  'cc_unittests',
  'chromedriver_unittests',
  'components_unittests',
  'content_browsertests',
  'courgette_unittests',
  'crypto_unittests',
  'gcm_unit_tests',
  'gpu',
  'installer',
  'interactive_ui_tests',
  'jingle',
  'media',
  'nacl_integration',
  'net',
  'ppapi_unittests',
  'printing',
  'remoting',
  'sandbox',
  'unit',
  'url_unittests',

  # These are long, so do them last
  'browser_tests',
  'sync_integration',
]

f_chromium_dbg_android_mips_builder = \
  annotator_factory.AnnotatorFactory().BaseFactory(
    recipe='android/builder')

f_chromium_dbg_android_x86_builder = \
  annotator_factory.AnnotatorFactory().BaseFactory(
    recipe='android/builder')

f_chromium_mac_1010 = annotator_factory.AnnotatorFactory().BaseFactory(
  'chromium')

f_chromium_mac_1010_mac_views = annotator_factory.AnnotatorFactory(
  ).BaseFactory('chromium')

f_chromium_mac_1011 = annotator_factory.AnnotatorFactory().BaseFactory(
  'chromium')

f_chromium_mac_1011_force_mac_toolchain = annotator_factory.AnnotatorFactory(
  ).BaseFactory('chromium')


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (optional): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

m_annotator = annotator_factory.AnnotatorFactory()

def m_kitchen(recipe):
  return kitchen_factory.KitchenFactory(
      active_master=ActiveMaster,
      repository='https://chromium.googlesource.com/chromium/tools/build.git',
      recipe=recipe,
      factory_properties={'path_config': 'kitchen'})

b_chromium_win_analyze = {'name': 'Chromium Windows Analyze',
  'builddir': 'Chromium_Windows_Analyze',
  'factory': f_win_analyze,
  'auto_reboot': False,
}

b_chromium_rel_builder = {'name': 'Chromium Builder',
  'builddir': 'chromium-rel-builder',
  'factory': F_RECIPE,
  'category': 'windows',
  'auto_reboot': False,
}

b_chromium_dbg_builder = {'name': 'Chromium Builder (dbg)',
  'builddir': 'chromium-dbg-builder',
  'factory': F_RECIPE_WDBG,
  'category': 'windows',
  'auto_reboot': False,
}

b_chromium_win_pgo_builder = {
  'name': 'Chromium Win PGO Builder',
  'builddir': 'chromium-win-pgo-builder',
  'factory': f_chromium_win_pgo_builder,
  'category': 'windows',
  'auto_reboot': False,
}

b_chromium_win_x64_pgo_builder = {
  'name': 'Chromium Win x64 PGO Builder',
  'builddir': 'chromium-win-x64-pgo-builder',
  'factory': f_chromium_win_x64_pgo_builder,
  'category': 'windows',
  'auto_reboot': False,
}

b_chromium_dbg_vista_tests_1 = {
  'name': 'Vista Tests (dbg)(1)',
  'factory': F_RECIPE_WDBG,
  'category': 'windows',
  'auto_reboot': False,
}

b_chromium_dbg_vista_tests_2 = {
  'name': 'Vista Tests (dbg)(2)',
  'factory': F_RECIPE_WDBG,
  'category': 'windows',
  'auto_reboot': False,
}

b_chromium_rel_win8_tests_1 = {
  'name': 'Win8 Tests (1)',
  'factory': F_RECIPE,
  'category': 'windows',
  'auto_reboot': False,
}

b_chromium_rel_win8_tests_2 = {
  'name': 'Win8 Tests (2)',
  'factory': F_RECIPE,
  'category': 'windows',
  'auto_reboot': False,
}

b_blink_linux_lsan_asan = {
  'name': 'Blink Linux LSan ASan',
  'builddir': 'blink-linux-lsan-asan',
  'factory': F_RECIPE_MISC,
  'category': 'Sanitizers',
  'auto_reboot': True,
}

b_chromium_win_goma = {
  'name': 'CrWinGoma',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': False,
}

b_chromium_win_goma_shared = {
  'name': 'CrWinGoma(dll)',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': False,
}

b_chromium_win7_goma = {
  'name': 'CrWin7Goma',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': False,
}

b_chromium_win7_goma_shared = {
  'name': 'CrWin7Goma(dll)',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': False,
}

b_chromium_win7_goma_dbg = {
  'name': 'CrWin7Goma(dbg)',
  'factory': m_annotator.BaseFactory('chromium', timeout=3600),
  'category': 'goma',
  'auto_reboot': False,
}

b_chromium_win7_goma_clobber = {
  'name': 'CrWin7Goma(clbr)',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': False,
}

b_chromium_win_clang_goma = {
  'name': 'CrWinClangGoma',
  'factory': m_annotator.BaseFactory('chromium', timeout=3000),
  'category': 'goma',
  'auto_reboot': False,
}

b_chromium_win_x64 = {
  'name': 'Chromium Win x64 Clobber',
  'factory': F_RECIPE_WMISC,
  'category': 'windows',
  'auto_reboot': False,
}

b_win_clang = {
  'name': 'WinClang',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'win clang',
  'auto_reboot': False,
}

b_chromium_win_clang = {
  'name': 'CrWinClang',
  'factory': m_annotator.BaseFactory('chromium', triggers=['cr_win_clang']),
  'category': 'win clang',
  'auto_reboot': False,
}

b_chromium_win_clang_tester = {
  'name': 'CrWinClang tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'win clang',
  'auto_reboot': False,
}

b_chromium_win_clang_dbg = {
  'name': 'CrWinClang(dbg)',
  'factory': m_annotator.BaseFactory('chromium', triggers=['cr_win_clang_dbg']),
  'category': 'win clang',
  'auto_reboot': False,
}
b_chromium_win_clang_dbg_tester = {
  'name': 'CrWinClang(dbg) tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'win clang',
  'auto_reboot': False,
}

b_chromium_win_clang_shared = {
  'name': 'CrWinClang(shared)',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['cr_win_clang_shared']),
  'category': 'win clang',
  'auto_reboot': False,
}
b_chromium_win_clang_shared_tester = {
  'name': 'CrWinClang(shared) tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'win clang',
  'auto_reboot': False,
}

b_chromium_win_clang_64 = {
  'name': 'CrWinClang64',
  'factory': m_annotator.BaseFactory('chromium', triggers=['cr_win_clang_64']),
  'category': 'win clang',
  'auto_reboot': False,
}
b_chromium_win_clang_64_tester = {
  'name': 'CrWinClang64 tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'win clang',
  'auto_reboot': False,
}

b_chromium_win_clang_64_dbg = {
  'name': 'CrWinClang64(dbg)',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['cr_win_clang_64_dbg']),
  'category': 'win clang',
  'auto_reboot': False,
}
b_chromium_win_clang_64_dbg_tester = {
  'name': 'CrWinClang64(dbg) tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'win clang',
  'auto_reboot': False,
}

b_chromium_win_clang_64_shared = {
  'name': 'CrWinClang64(dll)',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['cr_win_clang_64_shared']),
  'category': 'win clang',
  'auto_reboot': False,
}
b_chromium_win_clang_64_shared_tester = {
  'name': 'CrWinClang64(dll) tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'win clang',
  'auto_reboot': False,
}

b_chromium_win_clang_lld = {
  'name': 'CrWinClangLLD',
  'factory': m_annotator.BaseFactory('chromium', triggers=['cr_win_clang_lld']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_chromium_win_clang_lld_tester = {
  'name': 'CrWinClangLLD tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_chromium_win_clang_lld_dbg = {
  'name': 'CrWinClngLLDdbg',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['cr_win_clang_lld_dbg']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_chromium_win_clang_lld_dbg_tester = {
  'name': 'CrWinClngLLDdbg tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_chromium_win_clang_lld64 = {
  'name': 'CrWinClangLLD64',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['cr_win_clang_lld64']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_chromium_win_clang_lld64_tester = {
  'name': 'CrWinClangLLD64 tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_chromium_win_clang_lld64_dbg = {
  'name': 'CrWinClngLLD64dbg',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['cr_win_clang_lld64_dbg']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_chromium_win_clang_lld64_dbg_tester = {
  'name': 'CrWinClngLLD64dbg tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}

b_chromium_win_clang_asan = {
  'name': 'CrWinAsan',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['cr_win_clang_asan']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_chromium_win_clang_asan_tester = {
  'name': 'CrWinAsan tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}

b_chromium_win_clang_asan_shared = {
  'name': 'CrWinAsan(dll)',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['cr_win_clang_asan_shared']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_chromium_win_clang_asan_shared_tester = {
  'name': 'CrWinAsan(dll) tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}

b_chromium_win_clang_asan_coverage = {
  'name': 'CrWinAsanCov',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['cr_win_clang_asan_coverage']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_chromium_win_clang_asan_coverage_tester = {
  'name': 'CrWinAsanCov tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}

b_clang_tot_linux = {
  'name': 'ClangToTLinux',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['clang_tot_linux']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_linux_tester = {
  'name': 'ClangToTLinux tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}

b_clang_tot_linux_dbg = {
  'name': 'ClangToTLinux (dbg)',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}

b_clang_tot_linux_asan = {
  'name': 'ClangToTLinuxASan',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['clang_tot_linux_asan']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_linux_asan_tester = {
  'name': 'ClangToTLinuxASan tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}

b_clang_tot_linux_ubsan_vptr = {
  'name': 'ClangToTLinuxUBSanVptr',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['clang_tot_linux_ubsan_vptr']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_linux_ubsan_vptr_tester = {
  'name': 'ClangToTLinuxUBSanVptr tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}

b_clang_tot_android_asan = {
  'name': 'ClangToTAndroidASan',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['clang_tot_android_asan']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_android_asan_tester = {
  'name': 'ClangToTAndroidASan tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}

b_clang_tot_mac = {
  'name': 'ClangToTMac',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['clang_tot_mac']),
  'category': 'clang tot',
  'auto_reboot': True,
}
b_clang_tot_mac_tester = {
  'name': 'ClangToTMac tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': True,
}

b_clang_tot_mac_dbg = {
  'name': 'ClangToTMac (dbg)',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': True,
}

b_clang_tot_mac_asan = {
  'name': 'ClangToTMacASan',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['clang_tot_mac_asan']),
  'category': 'clang tot',
  'auto_reboot': True,
}
b_clang_tot_mac_asan_tester = {
  'name': 'ClangToTMacASan tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': True,
}

b_clang_tot_ios = {
  'name': 'ClangToTiOS',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory(
    'ios/unified_builder_tester'
  ),
  'category': 'clang tot',
  'auto_reboot': True,
}

b_clang_tot_win = {
  'name': 'ClangToTWin',
  'factory': m_annotator.BaseFactory('chromium', triggers=['clang_tot_win']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_win_tester = {
  'name': 'ClangToTWin tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_win_dbg = {
  'name': 'ClangToTWin(dbg)',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['clang_tot_win_dbg']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_win_dbg_tester = {
  'name': 'ClangToTWin(dbg) tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_win_dll = {
  'name': 'ClangToTWin(dll)',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['clang_tot_win_dll']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_win_dll_tester = {
  'name': 'ClangToTWin(dll) tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_win64 = {
  'name': 'ClangToTWin64',
  'factory': m_annotator.BaseFactory('chromium', triggers=['clang_tot_win64']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_win64_tester = {
  'name': 'ClangToTWin64 tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_win64_dbg = {
  'name': 'ClangToTWin64(dbg)',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['clang_tot_win64_dbg']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_win64_dbg_tester = {
  'name': 'ClangToTWin64(dbg) tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_win64_dll = {
  'name': 'ClangToTWin64(dll)',
  'factory': m_annotator.BaseFactory('chromium',
                                     triggers=['clang_tot_win64_dll']),
  'category': 'clang tot',
  'auto_reboot': False,
}
b_clang_tot_win64_dll_tester = {
  'name': 'ClangToTWin64(dll) tester',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}

b_chromium_win_mini_installer = {
  'name': 'Chromium Win MiniInstaller Tests',
  'factory': F_RECIPE,
  'category': 'windows',
  'auto_reboot': False,
}

b_chromium_dbg_android_builder = {
  'name': 'Android Builder (dbg)',
  'factory': m_annotator.BaseFactory(recipe='chromium',
                                     triggers=['android_dbg']),
  'category': 'android_builder',
}

b_chromium_dbg_android_emulator_builder_tests = {
  'name': 'Android Tests (x86 emulator)',
  'factory': m_annotator.BaseFactory(recipe='emulator'),
  'category': 'android_tests',
}

b_chromium_rel_android_remoting_tests = {
  'name': 'Android Remoting Tests',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory(
      recipe='chromium'),
  'category': 'android_tests',
}

b_chromium_dbg_android_tests_trial = {
  'name': 'Android Tests (trial)(dbg)',
  'factory': m_annotator.BaseFactory(recipe='chromium'),
  'category': 'android_tests',
}

b_chromium_dbg_android_chromedriver_tests = {
  'name': 'Android ChromeDriver Tests (dbg)',
  'factory': F_RECIPE_MISC,
  'category': 'android_tests',
}

b_chromium_dbg_android_asan_builder_tests = {
  'name': 'Android Asan Builder Tests (dbg)',
  'factory': m_annotator.BaseFactory(recipe='chromium'),
  'category': 'android_tests',
}

b_chromium_dbg_android_cloud_tests = {
  'name': 'Android Cloud Tests',
  'factory': m_annotator.BaseFactory(recipe='chromium'),
  'category': 'android_tests',
}

b_chromium_dbg_ios_simulator = {
  'name': 'Chromium_iOS_Simulator_(dbg)',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory(
    'ios/unified_builder_tester'
  ),
  'category': 'ios',
  'auto_reboot': True,
}

b_chromium_rel_ios_device = {
  'name': 'Chromium_iOS_Device',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory(
    'ios/unified_builder_tester'
  ),
  'category': 'ios',
  'auto_reboot': True,
}

b_chromium_rel_ninja_ios_device = {
  'name': 'Chromium_iOS_Device_(ninja)',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory(
    'ios/unified_builder_tester'
  ),
  'category': 'ios',
  'auto_reboot': True,
}

b_chromium_linux_goma_canary = {
  'name': 'Chromium Linux Goma Canary',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': False,
}

b_chromium_linux_goma_canary_clobber = {
  'name': 'Chromium Linux Goma Canary (clobber)',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': False,
}

b_chromium_linux_precise_goma_linktest = {
  'name': 'Chromium Linux Precise Goma LinkTest',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': False,
}

b_chromium_linux32_goma_canary_clobber = {
  'name': 'Chromium Linux32 Goma Canary (clobber)',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': False,
}

b_chromium_mac_106_goma_canary = {
  'name': 'Chromium Mac 10.9 Goma Canary',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_mac_107_goma_canary = {
  'name': 'Chromium Mac 10.9 Goma Canary (dbg)',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_mac_106_goma_canary_clobber = {
  'name': 'Chromium Mac 10.9 Goma Canary (clobber)',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_mac_107_goma_canary_clobber = {
  'name': 'Chromium Mac 10.9 Goma Canary (dbg)(clobber)',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_mac_1010_mac_views = {
  'name': 'Chromium Mac 10.10 MacViews',
  'factory': f_chromium_mac_1010_mac_views,
  'auto_reboot': True,
}

b_chromium_mac_1011 = {
  'name': 'Chromium Mac 10.11',
  'factory': f_chromium_mac_1011,
  'auto_reboot': True,
}

b_chromium_mac_1011_force_mac_toolchain = {
  'name': 'Chromium Mac 10.11 Force Mac Toolchain',
  'factory': f_chromium_mac_1011_force_mac_toolchain,
  'auto_reboot': True,
}

b_windows_8_app_certification = {
  'name': 'Windows 8 App Certification',
  'factory': F_RECIPE_WMISC,
  'category': 'windows',
}

b_linux_arm = {
  'name': 'Linux ARM',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory('chromium'),
  'category': 'linux',
  'auto_reboot': False,
}

b_chromiumos_linux_tests = {
  'name': 'ChromiumOS Linux Tests',
  'factory': F_RECIPE_MISC,
  'category': 'linux',
  'auto_reboot': False,
}

b_chromium_ozone_tests = {
    'name': 'Ozone ECS Linux',
    'builddir': 'ozone-linux',
    'factory': annotator_factory.AnnotatorFactory().BaseFactory('ozone_ecs',
        {'use_mirror': ActiveMaster.is_production_host or None}),
    'auto_reboot': False,
}

b_chromium_trusty = {
    'name': 'Linux Trusty',
    'factory': annotator_factory.AnnotatorFactory().BaseFactory('chromium'),
    'category': 'linux',
    'auto_reboot': True,
}

b_chromium_trusty_dbg = {
    'name': 'Linux Trusty (dbg)',
    'factory': annotator_factory.AnnotatorFactory().BaseFactory('chromium'),
    'category': 'linux',
    'auto_reboot': True,
}

b_chromium_v8_api_stability = {
    'name': 'Linux V8 API Stability',
    'factory': annotator_factory.AnnotatorFactory().BaseFactory('chromium'),
    'category': 'linux',
    'auto_reboot': True,
}

b_chromium_linux_webkit_trace_wrappables = {
    'name': 'WebKit Linux - TraceWrappables',
    'factory': annotator_factory.AnnotatorFactory().BaseFactory('chromium'),
    'category': 'linux',
    'auto_reboot': True,
}

b_headless_linux = {
    'name': 'Headless Linux (dbg)',
    'factory': annotator_factory.AnnotatorFactory().BaseFactory('chromium'),
    'category': 'linux',
}

b_chromium_windows_drmemory_builder = {
  'name': 'Windows Builder (DrMemory)',
  'builddir': 'drm-cr',
  'factory': F_RECIPE_WDM,
  'category': 'drmemory',
  'auto_reboot': False,
}

b_chromium_tests_drmemory = {
  'name': 'Windows Tests (DrMemory)',
  'builddir': 'windows-tests-drm',
  'factory': F_RECIPE_WDM,
  'category': 'drmemory',
  'auto_reboot': True,
}

b_chromium_site_isolation_linux = {
  'name': 'Site Isolation Linux',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory('chromium'),
  'category': 'site_isolation',
  'auto_reboot': True,
}

b_chromium_site_isolation_win = {
  'name': 'Site Isolation Win',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory('chromium'),
  'category': 'site_isolation',
  'auto_reboot': True,
}

b_chromium_browser_side_navigation_linux = {
  'name': 'Browser Side Navigation Linux',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory('chromium'),
  'category': 'site_isolation',
  'auto_reboot': True,
}

b_chromium_closure_compilation_linux = {
  'name': 'Closure Compilation Linux',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory(
      recipe='closure_compilation'),
  'category': 'closure_compilation',
  'auto_reboot': True,
}

b_chromium_cfi_linux = {
  'name': 'CFI Linux',
  'factory': m_annotator.BaseFactory('chromium',
                                     timeout=12000),
  'category': 'chromium_cfi',
  'auto_reboot': True,
}

b_chromium_cfi_linux_tot = {
  'name': 'CFI Linux ToT',
  'factory': m_annotator.BaseFactory('chromium',
                                     timeout=12000),
  'category': 'clang tot',
  'auto_reboot': True,
}

b_chromium_cfi_linux_cf = {
  'name': 'CFI Linux CF',
  'factory': F_RECIPE_MISC,
  'category': 'chromium_cfi',
  'auto_reboot': True,
}

b_chromium_lto_linux_perf = {
  'name': 'LTO Linux Perf',
  'factory': m_annotator.BaseFactory('chromium',
                                     timeout=12000),
  'builddir': 'google-chrome-lto-linux_64',
  'category': 'chromium_cfi',
  'auto_reboot': True,
}

b_chromium_win10 = {
  'name': 'Chromium Win 10',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'win10',
  'auto_reboot': True,
}

b_chromium_md_top_chrome_chromeos_non_material = {
  'name': 'MD Top Chrome ChromeOS non-material',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'md top chrome',
  'auto_reboot': True,
}

b_chromium_md_top_chrome_chromeos_material_hybrid = {
  'name': 'MD Top Chrome ChromeOS material-hybrid',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'md top chrome',
  'auto_reboot': True,
}

b_chromium_md_top_chrome_win_material = {
  'name': 'MD Top Chrome Win material',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'md top chrome',
  'auto_reboot': True,
}

b_chromium_md_top_chrome_linux_material = {
  'name': 'MD Top Chrome Linux material',
  'factory': m_annotator.BaseFactory('chromium'),
  'category': 'md top chrome',
  'auto_reboot': True,
}

b_chromium_libfuzzer_upload_linux_asan = {
  'name': 'Libfuzzer Upload Linux ASan',
  'factory': m_annotator.BaseFactory('chromium_libfuzzer',
                                     timeout=24000),
  'category': 'chromium_libfuzzer',
  'auto_reboot': True,
}

b_chromium_libfuzzer_upload_linux_msan = {
  'name': 'Libfuzzer Upload Linux MSan',
  'factory': m_annotator.BaseFactory('chromium_libfuzzer',
                                     timeout=24000),
  'category': 'chromium_libfuzzer',
  'auto_reboot': True,
}

b_chromium_libfuzzer_upload_linux_ubsan = {
  'name': 'Libfuzzer Upload Linux UBSan',
  'factory': m_annotator.BaseFactory('chromium_libfuzzer',
                                     timeout=24000),
  'category': 'chromium_libfuzzer',
  'auto_reboot': True,
}

def windows_browser_drmemory_light_tester(shard, total):
  if shard < 1 or shard > total:
    raise
  ret = {'category': 'drmemory'}
  ret['name'] = 'Windows Browser (DrMemory light) (%d)' % shard
  ret['builddir'] = 'windows-browser-drm-light-%d' % shard
  ret['factory'] = F_RECIPE_WDM
  return ret

c['builders'] = [
  # Windows release
  b_chromium_rel_builder,
  b_chromium_rel_win8_tests_1,
  b_chromium_rel_win8_tests_2,
  b_chromium_win_goma,
  b_chromium_win_goma_shared,
  b_chromium_win7_goma,
  b_chromium_win7_goma_shared,
  b_chromium_win7_goma_dbg,
  b_chromium_win7_goma_clobber,
  b_chromium_win_clang_goma,
  b_windows_8_app_certification,
  b_chromium_win_x64,
  b_win_clang,
  b_chromium_win_clang,
  b_chromium_win_clang_tester,
  b_chromium_win_clang_dbg,
  b_chromium_win_clang_dbg_tester,
  b_chromium_win_clang_shared,
  b_chromium_win_clang_shared_tester,
  b_chromium_win_clang_64,
  b_chromium_win_clang_64_tester,
  b_chromium_win_clang_64_dbg,
  b_chromium_win_clang_64_dbg_tester,
  b_chromium_win_clang_64_shared,
  b_chromium_win_clang_64_shared_tester,
  b_chromium_win_pgo_builder,
  b_chromium_win_x64_pgo_builder,

  # Windows debug
  b_chromium_dbg_builder,
  b_chromium_dbg_vista_tests_1,
  b_chromium_dbg_vista_tests_2,

  # Mac BuilderTesters
  b_chromium_mac_106_goma_canary,
  b_chromium_mac_107_goma_canary,
  b_chromium_mac_106_goma_canary_clobber,
  b_chromium_mac_107_goma_canary_clobber,
  b_chromium_mac_1010_mac_views,
  b_chromium_mac_1011,
  b_chromium_mac_1011_force_mac_toolchain,

  # Windows /Analyze builder
  b_chromium_win_analyze,

  # Linux BuilderTesters
  b_chromium_linux_goma_canary,
  b_chromium_linux_goma_canary_clobber,
  b_chromium_linux_precise_goma_linktest,
  b_chromium_linux32_goma_canary_clobber,
  b_chromiumos_linux_tests,

  # Linux ARM
  b_linux_arm,

  # Android
  b_chromium_dbg_android_builder,
  b_chromium_dbg_android_tests_trial,
  b_chromium_dbg_android_emulator_builder_tests,
  b_chromium_rel_android_remoting_tests,
  b_chromium_dbg_android_cloud_tests,

  b_chromium_dbg_android_chromedriver_tests,
  b_chromium_dbg_android_asan_builder_tests,

  # iOS
  b_chromium_dbg_ios_simulator,
  b_chromium_rel_ios_device,
  b_chromium_rel_ninja_ios_device,

  # Sanitizers
  b_blink_linux_lsan_asan,
  b_chromium_libfuzzer_upload_linux_asan,
  b_chromium_libfuzzer_upload_linux_msan,
  b_chromium_libfuzzer_upload_linux_ubsan,

  # MiniInstaller
  b_chromium_win_mini_installer,

  # Ozone Shell
  b_chromium_ozone_tests,

  # Ubuntu 14.04 Trusty
  b_chromium_trusty,
  b_chromium_trusty_dbg,

  # V8 API stability checker
  b_chromium_v8_api_stability,

  # Headles BuilderTester
  b_headless_linux,

  # Site Isolation
  b_chromium_site_isolation_linux,
  b_chromium_site_isolation_win,
  b_chromium_browser_side_navigation_linux,

  # Closure Compilation
  b_chromium_closure_compilation_linux,

  # Clang ToT bots.
  b_clang_tot_linux,
  b_clang_tot_linux_tester,
  b_clang_tot_linux_dbg,
  b_clang_tot_linux_asan,
  b_clang_tot_linux_asan_tester,
  b_clang_tot_linux_ubsan_vptr,
  b_clang_tot_linux_ubsan_vptr_tester,
  b_clang_tot_android_asan,
  b_clang_tot_android_asan_tester,
  b_clang_tot_mac,
  b_clang_tot_mac_tester,
  b_clang_tot_mac_dbg,
  b_clang_tot_mac_asan,
  b_clang_tot_mac_asan_tester,
  b_clang_tot_ios,
  b_clang_tot_win,
  b_clang_tot_win_tester,
  b_clang_tot_win_dbg,
  b_clang_tot_win_dbg_tester,
  b_clang_tot_win_dll,
  b_clang_tot_win_dll_tester,
  b_clang_tot_win64,
  b_clang_tot_win64_tester,
  b_clang_tot_win64_dbg,
  b_clang_tot_win64_dbg_tester,
  b_clang_tot_win64_dll,
  b_clang_tot_win64_dll_tester,
  b_chromium_win_clang_lld,
  b_chromium_win_clang_lld_tester,
  b_chromium_win_clang_lld_dbg,
  b_chromium_win_clang_lld_dbg_tester,
  b_chromium_win_clang_lld64,
  b_chromium_win_clang_lld64_tester,
  b_chromium_win_clang_lld64_dbg,
  b_chromium_win_clang_lld64_dbg_tester,
  b_chromium_win_clang_asan,
  b_chromium_win_clang_asan_tester,
  b_chromium_win_clang_asan_shared,
  b_chromium_win_clang_asan_shared_tester,
  b_chromium_win_clang_asan_coverage,
  b_chromium_win_clang_asan_coverage_tester,

  # Control flow integrity.
  b_chromium_cfi_linux,
  b_chromium_cfi_linux_tot,
  b_chromium_cfi_linux_cf,

  # LTO
  b_chromium_lto_linux_perf,

  # Windows 10.
  b_chromium_win10,

  # Material Design in the browser's top chrome.
  b_chromium_md_top_chrome_chromeos_non_material,
  b_chromium_md_top_chrome_chromeos_material_hybrid,
  b_chromium_md_top_chrome_win_material,
  b_chromium_md_top_chrome_linux_material,

  # Webkit Linux with TraceWrappables feature on.
  b_chromium_linux_webkit_trace_wrappables,
]

# DrMemory test bots
b_win_drmemory = [
  b_chromium_windows_drmemory_builder,
  b_chromium_tests_drmemory,
]

# Windows Browser (DrMemory light)
for i in range(WINDOWS_BROWSER_DRMEMORY_LIGHT_TESTERS):
  c['builders'].append(
      windows_browser_drmemory_light_tester(
          i + 1, WINDOWS_BROWSER_DRMEMORY_LIGHT_TESTERS))

c['builders'].extend(b_win_drmemory)

c['builders'].extend([
  {
    'name': 'Linux Kitchen (kitchen_run)',
    'factory': m_kitchen('chromium'),
    'category': 'kitchen',
    'auto_reboot': True,
  },
  {
    'name': 'Linux Kitchen (annotated_run)',
    'factory': m_annotator.BaseFactory('chromium'),
    'category': 'kitchen',
    'auto_reboot': True,
  },
])

master_win_drmemory_cfg.Update(config, ActiveMaster, c)

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumFYI')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Buildbot master url:
# Must come before AutoSetupMaster().
c['buildbotURL'] = ActiveMaster.buildbot_url

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(
    c, ActiveMaster,
    public_html="../master.chromium/public_html",
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host,
    order_console_by_time=True)

# Add more.

if STATUS_PUSH:
  from buildbot.status.status_push import HttpStatusPush
  c['status'].append(HttpStatusPush(
      'http://craebuild.appspot.com/status-listener'))

if DRMEMORY_NOTIFIER:
  categories_steps = {
    'memory_tester': [
      'memory test: gcm_unit_tests',
      'memory test: printing',
      'memory test: media',
      'memory test: remoting',
      'memory test: sql',
      'memory test: sync',
      'memory test: sync_unit_tests',
      'memory test: ipc_tests',
      'memory test: base_unittests',
      'memory test: content',
      'memory test: crypto',
      'memory test: net',
      'memory test: ui_base_unittests',
      'memory test: unit',  # unit_tests can be sharded
      'memory test: unit_1',
      'memory test: unit_2',
      'memory test: url_unittests',
   ],
  }
  c['status'].append(failures_notifier.FailuresNotifier(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions={},
      relayhost=config.Master.smtp,
      status_header='New DrMemory failure on "%(builder)s":\n%(steps)s',
      subject='drmemory buildbot %(result)s in %(projectName)s on '
              '%(builder)s, revision %(revision)s',
      sendToInterestedUsers=False,  # don't send e-mails to the committers.
      extraRecipients=[
          'bruening+drmfyifailure@google.com',
          'zhaoqin+drmfyifailure@google.com',
      ],
      lookup=master_utils.FilterDomain(),
      forgiving_steps=[],
      use_getname=True))

c['status'].append(failures_notifier.FailuresNotifier(
      fromaddr=ActiveMaster.from_address,  # Reply-To address
      mode='failing',
      categories=['goma'],
      relayhost=config.Master.smtp,
      subject='goma canary buildbot %(result)s in %(projectName)s '
              'on %(builder)s',
      extraRecipients=[
           'ukai@google.com',
           'yyanagisawa@google.com',
           'shinyak@google.com',
      ],
      sendToInterestedUsers=False,
      forgiving_steps=['diagnose_goma']))

c['status'].append(MailNotifier(
      fromaddr=ActiveMaster.from_address,  # Reply-To address
      mode='failing',
      relayhost=config.Master.smtp,
      subject='Build failure on %(builder)s',
      extraRecipients=[
        'sebmarchand+pgofailure@google.com',
        'scottmg+pgofailure@google.com'
      ],
      sendToInterestedUsers=False,
      builders=['Chromium Win PGO Builder']))

c['status'].append(MailNotifier(
      fromaddr=ActiveMaster.from_address,  # Reply-To address
      mode='failing',
      relayhost=config.Master.smtp,
      subject='Build failure on %(builder)s',
      extraRecipients=['sbc@chromium.org'],
      sendToInterestedUsers=False,
      builders=['Linux ARM']))
