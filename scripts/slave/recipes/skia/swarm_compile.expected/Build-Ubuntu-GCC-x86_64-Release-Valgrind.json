[
  {
    "cmd": [
      "python",
      "-u",
      "[SLAVE_BUILD]/skia/tools/buildbot_spec.py",
      "/path/to/tmp/json",
      "Build-Ubuntu-GCC-x86_64-Release-Valgrind"
    ],
    "cwd": "[SLAVE_BUILD]/skia",
    "name": "exec buildbot_spec.py",
    "~followup_annotations": [
      "@@@STEP_LOG_LINE@json.output@{@@@",
      "@@@STEP_LOG_LINE@json.output@  \"build_targets\": [@@@",
      "@@@STEP_LOG_LINE@json.output@    \"most\"@@@",
      "@@@STEP_LOG_LINE@json.output@  ], @@@",
      "@@@STEP_LOG_LINE@json.output@  \"builder_cfg\": {@@@",
      "@@@STEP_LOG_LINE@json.output@    \"compiler\": \"GCC\", @@@",
      "@@@STEP_LOG_LINE@json.output@    \"configuration\": \"Release\", @@@",
      "@@@STEP_LOG_LINE@json.output@    \"extra_config\": \"Valgrind\", @@@",
      "@@@STEP_LOG_LINE@json.output@    \"is_trybot\": false, @@@",
      "@@@STEP_LOG_LINE@json.output@    \"os\": \"Ubuntu\", @@@",
      "@@@STEP_LOG_LINE@json.output@    \"role\": \"Build\", @@@",
      "@@@STEP_LOG_LINE@json.output@    \"target_arch\": \"x86_64\"@@@",
      "@@@STEP_LOG_LINE@json.output@  }, @@@",
      "@@@STEP_LOG_LINE@json.output@  \"configuration\": \"Release\", @@@",
      "@@@STEP_LOG_LINE@json.output@  \"dm_flags\": [@@@",
      "@@@STEP_LOG_LINE@json.output@    \"--dummy-flags\"@@@",
      "@@@STEP_LOG_LINE@json.output@  ], @@@",
      "@@@STEP_LOG_LINE@json.output@  \"do_perf_steps\": false, @@@",
      "@@@STEP_LOG_LINE@json.output@  \"do_test_steps\": false, @@@",
      "@@@STEP_LOG_LINE@json.output@  \"env\": {@@@",
      "@@@STEP_LOG_LINE@json.output@    \"GYP_DEFINES\": \"skia_arch_type=x86_64 skia_release_optimization_level=1 skia_warnings_as_errors=1\"@@@",
      "@@@STEP_LOG_LINE@json.output@  }, @@@",
      "@@@STEP_LOG_LINE@json.output@  \"nanobench_flags\": [@@@",
      "@@@STEP_LOG_LINE@json.output@    \"--dummy-flags\"@@@",
      "@@@STEP_LOG_LINE@json.output@  ], @@@",
      "@@@STEP_LOG_LINE@json.output@  \"upload_dm_results\": false, @@@",
      "@@@STEP_LOG_LINE@json.output@  \"upload_perf_results\": false@@@",
      "@@@STEP_LOG_LINE@json.output@}@@@",
      "@@@STEP_LOG_END@json.output@@@"
    ]
  },
  {
    "cmd": [
      "make",
      "most"
    ],
    "cwd": "[SLAVE_BUILD]/skia",
    "env": {
      "BUILDTYPE": "Release",
      "CHROME_HEADLESS": "1",
      "CHROME_PATH": "[SLAVE_BUILD]/src",
      "GYP_DEFINES": "skia_arch_type=x86_64 skia_release_optimization_level=1 skia_warnings_as_errors=1",
      "PATH": "[SLAVE_BUILD]/depot_tools:%(PATH)s",
      "SKIA_OUT": "[SLAVE_BUILD]/out"
    },
    "name": "build most"
  },
  {
    "cmd": [
      "python",
      "-u",
      "import errno\nimport glob\nimport os\nimport shutil\nimport sys\n\nsrc = sys.argv[1]\ndst = sys.argv[2]\nbuild_products_whitelist = ['dm', 'dm.exe', 'nanobench', 'nanobench.exe', '*.so', '*.dll', '*.dylib', 'skia_launcher', 'lib/*.so', 'iOSShell.app', 'iOSShell.ipa']\n\ntry:\n  os.makedirs(dst)\nexcept OSError as e:\n  if e.errno != errno.EEXIST:\n    raise\n\nfor pattern in build_products_whitelist:\n  path = os.path.join(src, pattern)\n  for f in glob.glob(path):\n    print 'Copying build product %s to %s' % (f, dst)\n    shutil.move(f, dst)\n",
      "[SLAVE_BUILD]/out/Release",
      "[SWARM_OUT_DIR]/out/Release"
    ],
    "name": "copy build products",
    "~followup_annotations": [
      "@@@STEP_LOG_LINE@python.inline@import errno@@@",
      "@@@STEP_LOG_LINE@python.inline@import glob@@@",
      "@@@STEP_LOG_LINE@python.inline@import os@@@",
      "@@@STEP_LOG_LINE@python.inline@import shutil@@@",
      "@@@STEP_LOG_LINE@python.inline@import sys@@@",
      "@@@STEP_LOG_LINE@python.inline@@@@",
      "@@@STEP_LOG_LINE@python.inline@src = sys.argv[1]@@@",
      "@@@STEP_LOG_LINE@python.inline@dst = sys.argv[2]@@@",
      "@@@STEP_LOG_LINE@python.inline@build_products_whitelist = ['dm', 'dm.exe', 'nanobench', 'nanobench.exe', '*.so', '*.dll', '*.dylib', 'skia_launcher', 'lib/*.so', 'iOSShell.app', 'iOSShell.ipa']@@@",
      "@@@STEP_LOG_LINE@python.inline@@@@",
      "@@@STEP_LOG_LINE@python.inline@try:@@@",
      "@@@STEP_LOG_LINE@python.inline@  os.makedirs(dst)@@@",
      "@@@STEP_LOG_LINE@python.inline@except OSError as e:@@@",
      "@@@STEP_LOG_LINE@python.inline@  if e.errno != errno.EEXIST:@@@",
      "@@@STEP_LOG_LINE@python.inline@    raise@@@",
      "@@@STEP_LOG_LINE@python.inline@@@@",
      "@@@STEP_LOG_LINE@python.inline@for pattern in build_products_whitelist:@@@",
      "@@@STEP_LOG_LINE@python.inline@  path = os.path.join(src, pattern)@@@",
      "@@@STEP_LOG_LINE@python.inline@  for f in glob.glob(path):@@@",
      "@@@STEP_LOG_LINE@python.inline@    print 'Copying build product %s to %s' % (f, dst)@@@",
      "@@@STEP_LOG_LINE@python.inline@    shutil.move(f, dst)@@@",
      "@@@STEP_LOG_END@python.inline@@@"
    ]
  },
  {
    "name": "$result",
    "recipe_result": null,
    "status_code": 0
  }
]