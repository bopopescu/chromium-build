URL: http://twistedmatrix.com/trac/
Sources: http://twistedmatrix.com/trac/wiki/Downloads
Version: 10.2.0
License file: LICENSE

This version of Twisted is part of the Chromium third_party library,
and has diverged slightly from the initial 10.2.0 release. Below are
the full diffs.

=======

--- a/third_party/twisted_10_2/twisted/internet/process.py
+++ b/third_party/twisted_10_2/twisted/internet/process.py
@@ -890,22 +890,9 @@ class PTYProcess(abstract.FileDescriptor, _BaseProcess):
         Setup child process after fork() but before exec().
         """
         os.close(masterfd)
-        if hasattr(termios, 'TIOCNOTTY'):
-            try:
-                fd = os.open("/dev/tty", os.O_RDWR | os.O_NOCTTY)
-            except OSError:
-                pass
-            else:
-                try:
-                    fcntl.ioctl(fd, termios.TIOCNOTTY, '')
-                except:
-                    pass
-                os.close(fd)
-
         os.setsid()
 
-        if hasattr(termios, 'TIOCSCTTY'):
-            fcntl.ioctl(slavefd, termios.TIOCSCTTY, '')
+        fcntl.ioctl(slavefd, termios.TIOCSCTTY, '')
 
         for fd in range(3):
             if fd != slavefd:

=======

diff --git a/third_party/twisted_10_2/twisted/web/server.py b/third_party/twisted_10_2/twisted/web/server.py
index 2e9eabf..edcb34c 100644
--- a/third_party/twisted_10_2/twisted/web/server.py
+++ b/third_party/twisted_10_2/twisted/web/server.py
@@ -102,7 +102,7 @@ class Request(pb.Copyable, http.Request, components.Componentized):
             return name
         else: # lpp == 0
             if len(self.prepath) and self.prepath[-1]:
-                return self.prepath[-1] + '/' + name
+                return quote(self.prepath[-1], safe='') + '/' + name
             else:
                 return name

=======

diff --git a/third_party/twisted_10_2/twisted/spread/pb.py b/third_party/twisted_10_2/twisted/spread/pb.py
index 0ccee9e..6cd000c 100644
--- a/third_party/twisted_10_2/twisted/spread/pb.py
+++ b/third_party/twisted_10_2/twisted/spread/pb.py
@@ -72,7 +72,9 @@ from twisted.spread.flavors import setFactoryForClass
 from twisted.spread.flavors import setCopierForClassTree
 
 
-MAX_BROKER_REFS = 1024
+# Chromium: We are starting to use more references. Up this count to
+# accommodate.
+MAX_BROKER_REFS = 8192 # (Originally 1024)
 
 portno = 8787
 

=======

diff --git a/third_party/twisted_10_2/twisted/internet/_dumbwin32proc.py b/third_party/twisted_10_2/twisted/internet/_dumbwin32proc.py
index 6a31ae3..3a6d2e7 100644
--- a/third_party/twisted_10_2/twisted/internet/_dumbwin32proc.py
+++ b/third_party/twisted_10_2/twisted/internet/_dumbwin32proc.py
@@ -117,6 +117,11 @@ class Process(_pollingfile._PollingTimer, BaseProcess):
 
     closedNotifies = 0
 
+    # in some cases the subprocess can exit, but the std{out,err} handles never
+    # close. We set a 30s timeout after the first notification that the process
+    # has quit to consider it really dead.
+    BOGUS_PROCESS_DEATH_TIMEOUT_SECS = 30
+
     def __init__(self, reactor, protocol, command, args, environment, path):
         _pollingfile._PollingTimer.__init__(self, reactor)
         BaseProcess.__init__(self, protocol)
@@ -233,6 +238,8 @@ class Process(_pollingfile._PollingTimer, BaseProcess):
 
         self._addPollableResource(_Reaper(self))
 
+        self.lostProcessTimeout = None
+        self.isDead = False
 
     def signalProcess(self, signalID):
         if self.pid is None:
@@ -305,14 +312,32 @@ class Process(_pollingfile._PollingTimer, BaseProcess):
         self.closedNotifies += 1
         self.maybeCallProcessEnded()
 
+    def doCallProcessEnded(self):
+        if self.lostProcessTimeout is not None:
+            if self.lostProcessTimeout.active():
+                self.lostProcessTimeout.cancel()
+            self.lostProcessTimeout = None
+
+        if self.isDead:
+            return
+        self.isDead = True
+
+        win32file.CloseHandle(self.hProcess)
+        win32file.CloseHandle(self.hThread)
+        self.hProcess = None
+        self.hThread = None
+        self.loseConnection()
+
+        BaseProcess.maybeCallProcessEnded(self)
 
     def maybeCallProcessEnded(self):
-        if self.closedNotifies == 3 and self.lostProcess:
-            win32file.CloseHandle(self.hProcess)
-            win32file.CloseHandle(self.hThread)
-            self.hProcess = None
-            self.hThread = None
-            BaseProcess.maybeCallProcessEnded(self)
+        if self.lostProcess:
+            if self.closedNotifies == 3:
+                self.doCallProcessEnded()
+            elif self.lostProcessTimeout is None:
+                self.lostProcessTimeout = self.reactor.callLater(
+                    self.BOGUS_PROCESS_DEATH_TIMEOUT_SECS,
+                    self.doCallProcessEnded)
 
 
     # IConsumer
